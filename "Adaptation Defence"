#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
#include <cmath>
#include <string>
#include <limits>
#include "raylib.h"


int clamp(int value, int min, int max) {
    return std::max(min, std::min(value, max));
}

// Функция для интерполяции цвета в зависимости от здоровья врага
Color interpolateColor(int health, int maxHealth) {
    float t = (float)health / maxHealth;
    if (t <= 0.5f) {
        unsigned char r = (unsigned char)clamp((int)(RED.r + (YELLOW.r - RED.r) * t * 2.0f), 0, 255);
        unsigned char g = (unsigned char)clamp((int)(RED.g + (YELLOW.g - RED.g) * t * 2.0f), 0, 255);
        unsigned char b = (unsigned char)clamp((int)(RED.b + (YELLOW.b - RED.b) * t * 2.0f), 0, 255);
        unsigned char a = (unsigned char)clamp((int)(RED.a + (YELLOW.a - RED.a) * t * 2.0f), 0, 255);
        return Color{ r, g, b, a };
    }
    else {
        unsigned char r = (unsigned char)clamp((int)(YELLOW.r + (GREEN.r - YELLOW.r) * (t - 0.5f) * 2.0f), 0, 255);
        unsigned char g = (unsigned char)clamp((int)(YELLOW.g + (GREEN.g - YELLOW.g) * (t - 0.5f) * 2.0f), 0, 255);
        unsigned char b = (unsigned char)clamp((int)(YELLOW.b + (GREEN.b - YELLOW.b) * (t - 0.5f) * 2.0f), 0, 255);
        unsigned char a = (unsigned char)clamp((int)(YELLOW.a + (GREEN.a - YELLOW.a) * (t - 0.5f) * 2.0f), 0, 255);
        return Color{ r, g, b, a };
    }
}

// Определение констант
const int rows = 13;
const int cols = 13;
const int cellSize = 40;
const int otstup = 5;

// 0 - проходимая клетка
// 1 - стена
// 2 - место появления врагов (спавнер)
// 3 - база

const int matrix1[rows][cols] =
{
    {1, 1, 1, 1, 1, 0, 2, 0, 1, 1, 1, 1, 1},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 1, 1, 0, 0, 1, 1, 0, 0, 1, 0, 1},
    {1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 1},
    {1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1},
    {1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1},
    {1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
    {1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1, 0, 3, 0, 1, 1, 1, 1, 1}
};

// Впереди объявляем класс Enemy
class Enemy;

// Класс Турелей
class Turret {
public:
    int x, y;
    int damage = 3;
    int attackRadius = 1;
    float atkspeed = 0.5f; // Задержка между атаками
    float attackCooldown = 0.0f; // Время, прошедшее с последней атаки

    Turret(int posX, int posY) : x(posX), y(posY) {}

    void draw() const {
        DrawRectangle(static_cast<int>(x * (cellSize + otstup) + cellSize / 4),
            static_cast<int>(y * (cellSize + otstup) + cellSize / 4),
            static_cast<int>(cellSize / 2),
            static_cast<int>(cellSize / 2), YELLOW);
    }

    void attack(std::vector<Enemy>& enemies, float deltaTime);
};

// Структура для узлов A*
struct Node {
    int x, y;
    int g, h; // g - cost от старта, h - heuristic до цели
    Node* parent;

    int f() const { return g + h; } // общая стоимость

    bool operator>(const Node& other) const { return f() > other.f(); }
    bool operator==(const Node& other) const {
        return x == other.x && y == other.y && g == other.g && h == other.h;
    }
};

// Если клетка в диапазоне массива
bool isValid(int x, int y) {
    return x >= 0 && x < cols && y >= 0 && y < rows;
}

// Эвристика Манхэттена
int heuristic(int x1, int y1, int x2, int y2) {
    return abs(x1 - x2) + abs(y1 - y2);
}
// Функция для обозначения зарезервированных клеток, находящихся под атакой турелей
void markAttackRadius(const std::vector<Turret>& turrets, std::vector<std::vector<bool>>& reservedCells) {
    for (const auto& turret : turrets) {
        for (int dy = -turret.attackRadius; dy <= turret.attackRadius; ++dy) {
            for (int dx = -turret.attackRadius; dx <= turret.attackRadius; ++dx) {
                int newX = turret.x + dx;
                int newY = turret.y + dy;
                // Проверка на валидность и пределах радиуса
                if (isValid(newX, newY) && (abs(dx) + abs(dy) <= turret.attackRadius)) {
                    reservedCells[newY][newX] = true;
                }
            }
        }
    }
}

// Алгоритм A*
bool aStar(int startX, int startY, int endX, int endY, const int(&matrix)[rows][cols], const std::vector<std::vector<bool>>& reservedCells, std::vector<Node>& path) {
    std::priority_queue<Node, std::vector<Node>, std::greater<Node>> openSet;
    std::vector<std::vector<bool>> closedSet(rows, std::vector<bool>(cols, false));

    Node start{ startX, startY, 0, heuristic(startX, startY, endX, endY), nullptr };
    openSet.push(start);

    while (!openSet.empty()) {
        Node current = openSet.top();
        openSet.pop();

        if (current.x == endX && current.y == endY) {
            Node* node = &current;
            while (node != nullptr) {
                path.push_back(*node);
                node = node->parent;
            }
            std::reverse(path.begin(), path.end());
            return true;
        }

        closedSet[current.y][current.x] = true;
        std::vector<int> directions = { -1, 0, 1, 0, 0, -1, 0, 1 };

        for (size_t i = 0; i < directions.size(); i += 2) {
            int newX = current.x + directions[i];
            int newY = current.y + directions[i + 1];

            if (isValid(newX, newY) && !closedSet[newY][newX] && matrix[newY][newX] != 1 && !reservedCells[newY][newX]) {
                Node neighbor{ newX, newY, current.g + 1, heuristic(newX, newY, endX, endY), new Node(current) };
                openSet.push(neighbor);
            }
        }
    }
    return false;
}

// Класс врага
class Enemy {
public:
    int x, y;
    int speed = 1;
    int health;
    int maxHealth;
    bool alive = true;
    int id;
    bool canMove = false;

    std::vector<Node> path;
    size_t pathIndex = 0;

    float moveDelay = 0.8f;
    float elapsedTime = 0.0f;

    Enemy(int startX, int startY, const std::vector<Node>& foundPath, int enemyID, int enemyHealth)
        : x(startX), y(startY), path(foundPath), id(enemyID), health(enemyHealth), maxHealth(enemyHealth) {}

    void update(float deltaTime, const std::vector<Enemy>& enemies);

    int distanceToBase(int baseX, int baseY) const {
        return abs(x - baseX) + abs(y - baseY);
    }
};

// Реализация метода attack с учётом задержки и приоритета
void Turret::attack(std::vector<Enemy>& enemies, float deltaTime) {
    attackCooldown -= deltaTime;

    if (attackCooldown <= 0) {
        Enemy* closestEnemy = nullptr;
        int closestDistance = std::numeric_limits<int>::max();

        for (auto& enemy : enemies) {
            if (enemy.alive) {
                int distance = abs(enemy.x - x) + abs(enemy.y - y);
                if (distance <= attackRadius) {
                    int distToBase = enemy.distanceToBase(matrix1[rows - 1][cols / 2], rows - 1);
                    if (distToBase < closestDistance) {
                        closestDistance = distToBase;
                        closestEnemy = &enemy;
                    }
                }
            }
        }

        if (closestEnemy) {
            closestEnemy->health -= damage;
            if (closestEnemy->health <= 0) {
                closestEnemy->alive = false;
            }
        }
        attackCooldown = atkspeed;
    }
}

// Функция для отрисовки матрицы
void DrawMatrix(const int(&matrix)[rows][cols]) {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            Color color;
            switch (matrix[i][j]) {
            case 0: color = WHITE; break;
            case 1: color = DARKBLUE; break;
            case 2: color = RED; break;
            case 3: color = GREEN; break;
            default: color = GRAY; break;
            }
            DrawRectangle(static_cast<int>(j * (cellSize + otstup)),
                static_cast<int>(i * (cellSize + otstup)),
                cellSize, cellSize, color);
        }
    }
}

// Функция для инициализации новой волны врагов с задержкой и правильным спавном, увеличением здоровья
void wave(std::vector<Enemy>& enemies, int waveNumber, const std::vector<Node>& path, float enemySpawnDelay) {
    int enemiesInWave = 1 + (waveNumber / 3);
    int startX = 6;
    int startY = 0;
    int baseHealth = 5;

    for (int i = 0; i < enemiesInWave; i++) {
        int health = baseHealth + (i * 2);
        enemies.emplace_back(startX, startY, path, i, health);
        if (i < enemiesInWave - 1) {
            double startTime = GetTime();
            while (GetTime() - startTime < enemySpawnDelay && !WindowShouldClose()) {

            }
        }
    }
}

int main() {
    InitWindow(800, 600, "Game");
    SetTargetFPS(60);

    int startX = -1, startY = -1, endX = -1, endY = -1;

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (matrix1[i][j] == 2) { startX = j; startY = i; }
            if (matrix1[i][j] == 3) { endX = j; endY = i; }
        }
    }

    if (startX == -1 || startY == -1 || endX == -1 || endY == -1) {
        std::cerr << "Error: Start or end point not found!" << std::endl;
        CloseWindow();
        return -1;
    }

    std::vector<Node> path;
    std::vector<Node> previousPath;
    std::vector<std::vector<bool>> reservedCells(rows, std::vector<bool>(cols, false));
    std::vector<Enemy> enemies;
    int waveNumber = 0;
    const int maxTurrets = 4;
    float spawnDelay = 1.0f;
    float spawnTimer = 0.0f;
    float enemySpawnDelay = 0.2f;

    std::vector<Turret> turrets;

    int baseHealth = 3;
    bool gameOver = false;
    bool gameLost = false;

    while (!WindowShouldClose()) {
        float deltaTime = GetFrameTime();
        spawnTimer += deltaTime;



        // Проверка на GAME OVER
        for (const auto& enemy : enemies) {
            if (enemy.alive && enemy.x == endX && enemy.y == endY) {
                gameLost = true;
                break;
            }
        }

        if (gameLost) {
            gameOver = true; // Меняем флаг gameOver на true
        }

        // Логика игры продолжается только, если игра не закончена
        if (!gameOver) {
            // Если не закончена игра, выполняем логику
            if (enemies.empty() && spawnTimer >= spawnDelay) {
                reservedCells.assign(rows, std::vector<bool>(cols, false));
                markAttackRadius(turrets, reservedCells);

                previousPath = path;
                path.clear();
                bool foundPath = aStar(startX, startY, endX, endY, matrix1, reservedCells, path);

                if (foundPath) {
                    wave(enemies, waveNumber, path, enemySpawnDelay);
                    std::cout << "Wave " << waveNumber + 1 << ": " << enemies.size() << " enemies spawned." << std::endl;
                    waveNumber++;
                    spawnTimer = 0.0f;
                }
                else {
                    std::cout << "No path found. Game Over." << std::endl;
                    break;
                }
            }

            for (auto& turret : turrets) {
                turret.attack(enemies, deltaTime);
            }

            for (size_t i = 0; i < enemies.size(); ) {
                if (enemies[i].alive) {
                    enemies[i].update(deltaTime, enemies);
                    i++;
                }
                else {
                    enemies.erase(enemies.begin() + i);
                }
            }

            if (IsMouseButtonPressed(MOUSE_RIGHT_BUTTON)) {
                Vector2 mousePos = GetMousePosition();
                int gridX = static_cast<int>(mousePos.x / (cellSize + otstup));
                int gridY = static_cast<int>(mousePos.y / (cellSize + otstup));

                if (isValid(gridX, gridY)) {
                    bool turretFound = false;

                    for (size_t i = 0; i < turrets.size(); ++i) {
                        if (turrets[i].x == gridX && turrets[i].y == gridY) {
                            turrets.erase(turrets.begin() + i);
                            turretFound = true;
                            break;
                        }
                    }

                    if (!turretFound && turrets.size() < maxTurrets && matrix1[gridY][gridX] == 1) {
                        turrets.emplace_back(gridX, gridY);
                    }
                }
            }
        }

        // Отрисовка всего, включая сообщение "YOU LOOSE", если игра окончена
        BeginDrawing();
        ClearBackground(DARKGRAY);

        // Отрисовка матрицы только если игра продолжается
        if (!gameOver) {
            DrawMatrix(matrix1);

            float offset = cellSize / 4;
            for (const Node& node : path) {
                DrawRectangle(static_cast<int>(node.x * (cellSize + otstup) + offset),
                    static_cast<int>(node.y * (cellSize + otstup) + offset),
                    static_cast<int>(cellSize / 2),
                    static_cast<int>(cellSize / 2), GRAY);
            }

            for (const auto& turret : turrets) {
                turret.draw();
            }

            for (const auto& enemy : enemies) {
                if (enemy.alive) {
                    float enemyOffset = cellSize / 2;
                    Color enemyColor = interpolateColor(enemy.health, enemy.maxHealth);
                    DrawCircle(static_cast<int>(enemy.x * (cellSize + otstup) + enemyOffset),
                        static_cast<int>(enemy.y * (cellSize + otstup) + enemyOffset),
                        static_cast<int>(cellSize / 4), enemyColor);
                }
            }

            DrawText(("Turrets: " + std::to_string(turrets.size())).c_str(), 600, 10, 20, WHITE);
            DrawText(("Wave: " + std::to_string(waveNumber)).c_str(), 600, 40, 20, WHITE);
        }
        // Отображение сообщения "YOU LOOSE" и кнопки "Restart"
        if (gameOver) {
            const char* loseMessage = "YOU LOSE";
            const char* restartMessage = "Restart";
            int fontSizeLose = 80;
            int fontSizeRestart = 30;

            int loseTextWidth = MeasureText(loseMessage, fontSizeLose);
            int loseTextHeight = fontSizeLose;
            int restartTextWidth = MeasureText(restartMessage, fontSizeRestart);
            int restartTextHeight = fontSizeRestart;


            int xLose = (GetScreenWidth() - loseTextWidth) / 2;
            int yLose = (GetScreenHeight() - loseTextHeight) / 2 - loseTextHeight / 2;
            DrawText(loseMessage, xLose, yLose, fontSizeLose, RED);


            int xRestart = (GetScreenWidth() - restartTextWidth) / 2;
            int yRestart = yLose + loseTextHeight;
            DrawRectangle(xRestart - 10, yRestart - 5, restartTextWidth + 20, restartTextHeight + 10, GREEN);
            DrawText(restartMessage, xRestart, yRestart, fontSizeRestart, BLACK);


            Rectangle restartButton = { xRestart - 10, yRestart - 5, restartTextWidth + 20, restartTextHeight + 10 };
            if (CheckCollisionPointRec(GetMousePosition(), restartButton) && IsMouseButtonPressed(MOUSE_LEFT_BUTTON)) {
                gameOver = false;
                gameLost = false;
                enemies.clear();
                waveNumber = 0;
                spawnTimer = 0.0f;
                baseHealth = 3;
                turrets.clear();
            }
        }

        EndDrawing();
    }

    CloseWindow();
    return 0;
}

void Enemy::update(float deltaTime, const std::vector<Enemy>& enemies) {
    if (!alive) return;

    if (!canMove) {
        bool allowMove = true;
        for (const auto& e : enemies) {
            if (e.id < id && e.x == path[0].x && e.y == path[0].y) {
                allowMove = false;
                break;
            }
        }
        if (allowMove) canMove = true;
    }

    if (canMove && elapsedTime >= moveDelay && pathIndex < path.size()) {
        Node& nextNode = path[pathIndex];
        if (x < nextNode.x) { x += speed; }
        else if (x > nextNode.x) { x -= speed; }
        else if (y < nextNode.y) { y += speed; }
        else if (y > nextNode.y) { y -= speed; }

        if (x == nextNode.x && y == nextNode.y) { pathIndex++; }
        elapsedTime = 0;
    }
    else if (canMove) {
        elapsedTime += deltaTime;
    }
}
