#include <iostream>
#include "raylib.h"
#include <vector>
// 0 - пустая хорошенькая клетка
// 1 - невозможно пройти 
// 2 - спавнер
// 3 - база
// 4 _ 7 - пулемётная башня
// 8 _ 11 - ракетная башня
// 12 _ - клетки повышеной стоимости
const int rows = 13;
const int cols = 13;
const int cellSize = 40;
int i, j;

const int matrix1[rows][cols] = {
    {1,1,1,1,1,1,2,1,1,1,1,1,1},
    {1,0,0,0,0,0,0,0,0,0,0,0,1},
    {1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1},
    {1, 0, 0, 1, 0, 0, 1, 1, 1, 0, 0, 0, 1},
    {1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1},
    {1, 0, 0, 1, 0, 0, 1, 1, 0, 1, 1, 0, 1},
    {1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
    {1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
    {1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1}
};
const int matrix2[rows][cols] = {
        {1,1,1,1,1,1,2,1,1,1,1,1,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,1,0,0,1},
        {1,1,1,0,1,1,1,0,1,1,0,0,1},
        {1,1,1,0,1,1,1,0,1,1,0,0,1},
        {1,0,0,0,0,1,1,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,1,1,0,1},
        {1,0,0,1,1,0,0,1,0,1,1,0,1},
        {1,0,0,1,1,0,0,1,0,1,1,0,1},
        {1,0,0,1,1,0,0,1,0,1,1,0,1},
        {1,0,0,1,1,0,0,0,0,0,0,0,1},
        {1,1,0,0,0,0,0,0,0,1,1,1,1},
        {1,1,1,1,1,1,3,1,1,1,1,1,1}
};
const int matrix3[rows][cols] = {
        {2,0,0,0,1,1,1,1,1,1,1,1,1},
        {0,0,0,0,0,0,0,0,0,0,0,0,1},
        {0,0,0,0,0,0,0,1,1,1,0,0,1},
        {0,0,0,0,0,0,0,1,1,1,0,0,1},
        {1,0,0,1,1,0,0,0,0,0,0,0,1},
        {1,0,0,0,0,0,0,0,0,0,0,0,1},
        {1,0,1,0,0,0,3,0,0,1,1,0,1},
        {1,0,1,0,0,0,0,0,0,1,1,0,1},
        {1,0,1,0,0,0,0,0,0,1,1,0,1},
        {1,0,1,0,0,0,0,0,0,0,0,0,0},
        {1,0,0,0,0,0,1,1,0,0,0,0,0},
        {1,0,0,0,0,0,1,1,0,0,0,0,0},
        {1,1,1,1,1,1,1,1,1,0,0,0,2}
};
void WalkCost(const int(&matrix)[rows][cols]) 
{
    int cost;
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            switch (matrix[i][j]) {
            case 1:
                cost = 1000000;
                break;
            case 0:
                cost = 0;
                break;
            if case (4 or 8):
            
            }
        }
    }
}
void DrawMatrix(const int(&matrix)[rows][cols]) {
    for (i = 0; i < rows; i++) {
        for (j = 0; j < cols; j++) {
            switch (matrix[i][j]) {
            case 1:
                DrawRectangle(j * cellSize, i * cellSize, cellSize, cellSize, DARKGRAY);
                break;
            case 2:
                DrawRectangle(j * cellSize, i * cellSize, cellSize, cellSize, RED);
                break;
            case 3:
                DrawRectangle(j * cellSize, i * cellSize, cellSize, cellSize, GREEN);
                break;
            default:
                DrawRectangle(j * cellSize, i * cellSize, cellSize, cellSize, WHITE);
                break;
            }
        }
    }
}



void drawenemy1()
{

}
int main() {
    InitWindow(800, 600, "Matrix Drawing Example");
    SetTargetFPS(60);
    bool show1 = true;
    bool show2 = false;
    bool show3 = false;
    while (!WindowShouldClose()) {

        if (IsKeyPressed(KEY_X)) {
            show1 = !show1;
        }
        if (IsKeyPressed(KEY_C)) {
            show2 = !show2;
        }
        if (IsKeyPressed(KEY_V)) {
            show3 = !show3;
        }

        BeginDrawing();
        ClearBackground(RAYWHITE);

        if (show1) {
            DrawMatrix(matrix1);
        }
        if (show2) {
            DrawMatrix(matrix2);
        }
        if (show3) {
            DrawMatrix(matrix3);
        }
        EndDrawing();
    }

    CloseWindow();
    return 0;
}
